{%- set common_base = {
  'user': {
    'name': 'salt',
  },
  'group': {
    'name': 'salt',
  },
  'directories': {
    'cache':         '/var/cache/salt',
    'configuration': '/etc/salt',
    'log':           '/var/log/salt',
    'persistence':   '/var/lib/salt',
    'pki':           '/var/lib/salt/pki',
  },
  'version': '3004',
} %}

{%- set base = {
  'common': common_base,
  'cloud': {
    'user':      common_base.user,
    'group':     common_base.group,
    'keys':      {},
    'providers': {},
    'profiles':  {},
    'pkgs':      {
      'primary':      'salt-cloud',
      'dependencies': [],
    },
    'directories': common_base.directories.copy(),
  },
  'minion': {
    'configuration': {
      'mode': 'managed',
      'data': {},
    },
    'directories': common_base.directories.copy(),
    'group': {
      'name': 'root',
    },
    'options': {
      'masterless': false
    },
    'pkgs': {
      'primary': 'salt-minion',
      'dependencies': [],
    },
    'service': {
      'name':   'salt-minion',
      'mode':   'running',
      'enable': true,
    },
    'user': {
      'name': 'root',
    },
    'cachecleaner': {
      'enabled':    false,
      'oncalendar': 'weekly',
      'days':       7,
    },
  },
  'master': {
    'configuration': {
      'mode': 'managed',
      'data': {},
    },
    'directories': common_base.directories.copy(),
    'gpg': {
      'pinentry_program': '/usr/bin/pinentry-curses',
    },
    'group': common_base.group,
    'keys': {
      'ssh': {},
      'gpg': {},
    },
    'options': {
      'gpg': false,
    },
    'pkgs': {
      'primary': 'salt-master',
      'dependencies': [],
    },
    'service': {
      'name': 'salt-minion',
    },
    'user': common_base.user,
  },
} %}

{%- if salt['pillar.get']('salt:minion:options:masterless', false) is sameas true %}
  {%- do base.master.configuration.update({"mode": "unmanaged"}) %}
  {%- do base.minion.configuration.update({"mode": "unmanaged"}) %}
  {%- do base.minion.configuration.data.update({"file_client": "local"}) %}
  {%- do base.minion.service.update({
    "mode":   "dead",
    "enable": false,
  }) %}
{%- endif %}

{%- if salt['pillar.get']('salt:master:options:gpg', false) is sameas true %}
  {%- do base.master['keys'].gpg.update({
    "pubring.gpg": none,
    "secring.gpg": none,
    "trustdb.gpg": none,
  }) %}
  {%- do base.master.configuration.update({
    "gpg_keydir": base.master.directories.configuration ~ '/master.gpgkeys.d',
  }) %}
{%- endif %}

{# until a migration scenario for existing PKI data is provided, stick with the legacy PKI location #}
{%- do base.minion.directories.update({"pki": '/etc/salt/pki'}) %}

{#
  Contrary to other formulas, we're not using the formula's name
  for the primary context variable as `salt` is reserved for SaltStack's
  own "dunder" context.
#}

{%- set base_with_pillar = salt['grains.filter_by']({
  'base': base,
  'Debian': {
    'common': {
      'repository': {
        'base_url': 'https://repo.saltproject.io',
      },
    },
    'master': {
      'pkgs': {
        'dependencies': ['python3-pygit2', 'gnupg'],
      },
    },
  },
}, base='base', merge=salt['pillar.get']('salt', {})) %}

{# Now set a few configuration options for each component based on the used directories etc #}
{%- set configmap = {
  'cloud': {
    'configuration': {
      'data': {
        'cachedir': base_with_pillar.cloud.directories.cache ~ '/cloud',
        'log_file': base_with_pillar.cloud.directories.log ~ '/cloud/cloud.log',
      }
    },
  },
  'master': {
    'configuration': {
      'data': {
        'cachedir': base_with_pillar.master.directories.cache ~ '/master',
        'log_file': base_with_pillar.master.directories.log ~ '/master/master.log',
        'pki_dir':  base_with_pillar.master.directories.pki ~ '/master',
      }
    },
  },
  'minion': {
    'configuration': {
      'data': {
        'cachedir': base_with_pillar.minion.directories.cache ~ '/minion',
        'log_file': base_with_pillar.minion.directories.log ~ '/minion.log',
        'pki_dir':  base_with_pillar.minion.directories.pki ~ '/minion',
      }
    },
  },
} %}

{# ...and finally, merge the configmap over the existing data into `saltdata` #}
{%- set saltdata = salt['grains.filter_by']({
  'base': base_with_pillar
}, base='base', merge=configmap) %}
